if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
data(vivenda)
str(vivienda)
#devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
data(vivenda)
str(vivienda)
# Gráfico de histograma para la variable 'preciom'
ggplot(vivienda, aes(x = preciom)) +
geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
labs(title = "Distribución de los precios de las viviendas",
x = "Precio",
y = "Frecuencia")
# Gráfico de barras para la variable 'zona'
ggplot(vivienda, aes(x = zona)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribución de las viviendas por zona",
x = "Zona",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de dispersión para 'preciom' vs 'areaconst'
ggplot(vivienda, aes(x = areaconst, y = preciom)) +
geom_point(color = "skyblue") +
labs(title = "Relación entre el área construida y el precio",
x = "Área construida",
y = "Precio")
# Gráfico de cajas para 'estrato'
ggplot(vivienda, aes(x = as.factor(estrato), y = preciom)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Distribución de precios por estrato",
x = "Estrato",
y = "Precio")
# Gráfico de barras para 'tipo'
ggplot(vivienda, aes(x = tipo)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribución de las viviendas por tipo",
x = "Tipo",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
head(vivienda)
levels(vivienda$tipo)
levels(vivienda$zona)
levels(vivienda$barrio)
summary(vivienda)
# Verificar si hay valores faltantes en todas las columnas
any_missing <- apply(vivienda, 2, function(x) any(is.na(x)))
# Mostrar el resultado
print(any_missing)
# Tratamiento de valores faltantes
vivienda <- na.omit(vivienda)
# Estandarización de variables si es necesario
# En este caso, parece que no es necesario estandarizar ninguna variable
# Transformaciones adecuadas para cada técnica de análisis
# En este caso, no se requieren transformaciones adicionales
# Aplicación de PCA
pca_result <- prcomp(vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')], scale. = TRUE)
# Visualización de la varianza explicada por cada componente principal
summary(pca_result)
# Gráfico de varianza explicada
plot(pca_result, type = "l")
# Selección de variables relevantes para el clustering
vivienda_cluster <- vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')]
# Normalización de los datos
vivienda_scaled <- scale(vivienda_cluster)
# Determinar el número óptimo de clusters utilizando el método del codo o la silueta
# (código para uno de los métodos)
wss <- (nrow(vivienda_scaled)-1)*sum(apply(vivienda_scaled,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(vivienda_scaled, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Aplicación de K-means con el número óptimo de clusters
k <- 5  # número óptimo de clusters obtenido del análisis anterior
kmeans_result <- kmeans(vivienda_scaled, centers = k)
# Visualización de los clusters
clusplot(vivienda_scaled, kmeans_result$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
# Gráfico de histograma para la variable 'preciom'
ggplot(vivienda, aes(x = preciom)) +
geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
labs(title = "Distribución de los precios de las viviendas",
x = "Precio",
y = "Frecuencia")
# Gráfico de barras para la variable 'zona'
ggplot(vivienda, aes(x = zona)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribución de las viviendas por zona",
x = "Zona",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de dispersión para 'preciom' vs 'areaconst'
ggplot(vivienda, aes(x = areaconst, y = preciom)) +
geom_point(color = "skyblue") +
labs(title = "Relación entre el área construida y el precio",
x = "Área construida",
y = "Precio")
# Gráfico de cajas para 'estrato'
ggplot(vivienda, aes(x = as.factor(estrato), y = preciom)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Distribución de precios por estrato",
x = "Estrato",
y = "Precio")
# Gráfico de barras para 'tipo'
ggplot(vivienda, aes(x = tipo)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribución de las viviendas por tipo",
x = "Tipo",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Tratamiento de valores faltantes
vivienda <- na.omit(vivienda)
# Estandarización de variables si es necesario
# En este caso, parece que no es necesario estandarizar ninguna variable
# Transformaciones adecuadas para cada técnica de análisis
# En este caso, no se requieren transformaciones adicionales
options(tibble.width = Inf)
head(vivienda)
#devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
# instalado el paquete knitr
install.packages("knitr")
# Luego, carga el paquete
library(knitr)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
options(tibble.width = Inf)
kable(head(vivienda))
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
# instalado el paquete knitr
install.packages("knitr")
# Luego, carga el paquete
library(knitr)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
data(vivenda)
str(vivienda)
options(tibble.width = Inf)
kable(head(vivienda))
#devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Cargar el paquete 'cluster'
library(cluster)
# Luego, carga el paquete
library(knitr)
data(vivenda)
str(vivienda)
options(tibble.width = Inf)
kable(head(vivienda))
levels(vivienda$tipo)
levels(vivienda$zona)
levels(vivienda$barrio)
summary(vivienda)
# Verificar si hay valores faltantes en todas las columnas
any_missing <- apply(vivienda, 2, function(x) any(is.na(x)))
# Mostrar el resultado
print(any_missing)
# Gráfico de histograma para la variable 'preciom'
ggplot(vivienda, aes(x = preciom)) +
geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
labs(title = "Distribución de los precios de las viviendas",
x = "Precio",
y = "Frecuencia")
# Gráfico de barras para la variable 'zona'
ggplot(vivienda, aes(x = zona)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribución de las viviendas por zona",
x = "Zona",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de dispersión para 'preciom' vs 'areaconst'
ggplot(vivienda, aes(x = areaconst, y = preciom)) +
geom_point(color = "skyblue") +
labs(title = "Relación entre el área construida y el precio",
x = "Área construida",
y = "Precio")
# Gráfico de cajas para 'estrato'
ggplot(vivienda, aes(x = as.factor(estrato), y = preciom)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Distribución de precios por estrato",
x = "Estrato",
y = "Precio")
# Gráfico de barras para 'tipo'
ggplot(vivienda, aes(x = tipo)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribución de las viviendas por tipo",
x = "Tipo",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Tratamiento de valores faltantes
vivienda <- na.omit(vivienda)
# Estandarización de variables si es necesario
# En este caso, parece que no es necesario estandarizar ninguna variable
# Transformaciones adecuadas para cada técnica de análisis
# En este caso, no se requieren transformaciones adicionales
# Aplicación de PCA
pca_result <- prcomp(vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')], scale. = TRUE)
# Visualización de la varianza explicada por cada componente principal
summary(pca_result)
# Gráfico de varianza explicada
plot(pca_result, type = "l")
# Selección de variables relevantes para el clustering
vivienda_cluster <- vivienda[, c('preciom', 'areaconst', 'parqueaderos', 'banios', 'habitaciones')]
# Normalización de los datos
vivienda_scaled <- scale(vivienda_cluster)
# Determinar el número óptimo de clusters utilizando el método del codo o la silueta
# (código para uno de los métodos)
wss <- (nrow(vivienda_scaled)-1)*sum(apply(vivienda_scaled,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(vivienda_scaled, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Aplicación de K-means con el número óptimo de clusters
k <- 5  # número óptimo de clusters obtenido del análisis anterior
kmeans_result <- kmeans(vivienda_scaled, centers = k)
# Visualización de los clusters
clusplot(vivienda_scaled, kmeans_result$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Instalar y cargar el paquete 'psych' para cálculos estadísticos
if (!requireNamespace("psych", quietly = TRUE)) {
install.packages("psych")
}
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
library(cluster)
library(knitr)
library(naniar)
library(dplyr)
library(psych)
data(vivenda)
str(vivienda)
options(tibble.width = Inf)
kable(head(vivienda))
kable(summary(vivienda))
# Calcular el total de valores faltantes por columna
total_missing <- colSums(is.na(vivienda))
# Mostrar los resultados en una tabla
kable(data.frame(Columna = names(total_missing), Valores_Faltantes = total_missing))
# Crear el dataframe con los datos
missing_data <- data.frame(Columna = names(total_missing), Valores_Faltantes = total_missing)
# Graficar los valores faltantes
ggplot(missing_data, aes(x = Columna, y = Valores_Faltantes)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
geom_text(aes(label = Valores_Faltantes), vjust = -0.5, size = 3) +  # Agregar etiquetas
labs(title = "Valores Faltantes por Columna", x = "Columna", y = "Cantidad de Valores Faltantes") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Gráfico de histograma para la variable 'preciom'
ggplot(vivienda, aes(x = preciom)) +
geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
stat_bin(geom = "text", aes(label = paste(round(..xmin..), "-", round(..xmax..))), vjust = -1.5, size = 3, angle = 90) +  # Etiquetas de rango
labs(title = "Distribución de los precios de las viviendas por rangos",
x = "Precio",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))  # Rotar etiquetas del eje X para mejor visualización
# Calcular la participación del total de filas por zona
total_rows <- nrow(vivienda)
zona_counts <- table(vivienda$zona)
participacion <- round(zona_counts / total_rows * 100, 2)  # Calcular la participación en porcentaje y redondear a dos decimales
# Crear el gráfico de barras con etiquetas de frecuencia y participación
ggplot(vivienda, aes(x = zona)) +
geom_bar(fill = rainbow(length(unique(vivienda$zona))), color = "black") +
stat_count(geom = "text", aes(label = paste(after_stat(count), " (", participacion, "%)")), vjust = -0.5, size = 3, angle = 90) +  # Etiquetas de frecuencia y participación
labs(title = "Distribución y participación de las viviendas por zona",
x = "Zona",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje X para mejor visualización
# Gráfico de dispersión para 'preciom' vs 'areaconst'
ggplot(vivienda, aes(x = areaconst, y = preciom)) +
geom_point(color = "skyblue") +
labs(title = "Relación entre el área construida y el precio",
x = "Área construida",
y = "Precio")
# Gráfico de cajas para 'estrato'
ggplot(vivienda, aes(x = as.factor(estrato), y = preciom, fill = as.factor(estrato))) +
geom_boxplot() +
scale_fill_manual(values = rainbow(length(unique(vivienda$estrato)))) +  # Asignar colores diferentes
labs(title = "Distribución de precios por estrato",
x = "Estrato",
y = "Precio" ,
fill = "Estrato")
# Gráfico de barras para 'tipo'
ggplot(vivienda, aes(x = tipo, fill = tipo)) +
geom_bar(color = "black") +
geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5, size = 3) +  # Agregar etiquetas de datos
scale_fill_manual(values = rainbow(length(unique(vivienda$tipo)))) +  # Asignar colores diferentes
labs(title = "Distribución de las viviendas por tipo",
x = "Tipo",
y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje X para mejor visualización
# Gráfico de dispersión para 'areaconst' vs 'tipo'
ggplot(vivienda, aes(x = areaconst, y = tipo, color = tipo)) +
geom_point() +
scale_color_manual(values = rainbow(length(unique(vivienda$tipo)))) +  # Asignar colores diferentes
labs(title = "Relación entre el área construida y el tipo de vivienda",
x = "Área construida",
y = "Tipo de vivienda")
# Eliminar la columna "id"
df_fit <- df_fit[, !names(df_fit) %in% c("id")]
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Instalar y cargar el paquete 'psych' para cálculos estadísticos
if (!requireNamespace("psych", quietly = TRUE)) {
install.packages("psych")
}
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
library(cluster)
library(knitr)
library(naniar)
library(dplyr)
library(psych)
data(vivenda)
str(vivienda)
options(tibble.width = Inf)
kable(head(vivienda))
#devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Instalar y cargar el paquete 'psych' para cálculos estadísticos
if (!requireNamespace("psych", quietly = TRUE)) {
install.packages("psych")
}
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Carga de librerías
library(tidyverse)
library(ggplot2)
library(cluster)
library(knitr)
library(naniar)
library(dplyr)
library(psych)
data(vivenda)
str(vivienda)
data(vivenda)
str(vivienda)
#devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Instalar y cargar el paquete 'psych' para cálculos estadísticos
if (!requireNamespace("psych", quietly = TRUE)) {
install.packages("psych")
}
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Carga de librerías
library(paqueteMODELOS)
library(tidyverse)
library(ggplot2)
library(cluster)
library(knitr)
library(naniar)
library(dplyr)
library(psych)
data(vivenda)
str(vivienda)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
# Instalación y carga de las librerías necesarias (si no están instaladas)
if (!require(tidyverse)) {
install.packages("tidyverse")
}
if (!require(ggplot2)) {
install.packages("ggplot2")
}
# Instalar y cargar el paquete 'psych' para cálculos estadísticos
if (!requireNamespace("psych", quietly = TRUE)) {
install.packages("psych")
}
# Instalar y cargar el paquete 'cluster' si no está instalado
if (!requireNamespace("cluster", quietly = TRUE)) {
install.packages("cluster")
}
# Carga de librerías
library(paqueteMODELOS)
library(tidyverse)
library(ggplot2)
library(cluster)
library(knitr)
library(naniar)
library(dplyr)
library(psych)
data(vivenda)
str(vivienda)
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
data(vivenda)
str(vivienda)
devtools::install_github("dgonxalex80/paqueteMODELOS", force = TRUE)
library(paqueteMODELOS)
data(vivenda)
str(vivienda)
load("C:/Users/jartp/Downloads/vivienda.rda")
load("C:/Users/jartp/Desktop/Informe A1U1/.RData")
load("C:/Users/jartp/Downloads/vivienda.rda")
load("C:/Users/jartp/Downloads/vivienda.rda")
str(vivienda.rda)
